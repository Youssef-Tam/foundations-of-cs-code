def is_prime(n): #"This function will check if the number is prime"#
 if n <= 1:
   return False
 for i in range(2, int(n**0.5) + 1):
   if n % i == 0:
     return False
 return True
def factor_modulus(N): #" This function attempts to factor a Modulus N using trial divsion "#
 for i in range(2, int(N**0.5) + 1):
   if N % i == 0:
     return (i, N // i)  
 return None 
N = 133 #"Test case"# 
E = 29
factors = factor_modulus(N)
if factors:# Print factors if found
 print("N factored:", factors[0], "and", factors[1])
else:
 print("N not factored within this key space.")
P = factors[0]# Assign values of P and Q, then calculate Totient T
Q = factors[1]
T = (P-1)*(Q-1)
print(" The Totient is =",T)
def egcd(a, b):
if a == 0:
   return (b, 0, 1)
 else:
   g, y, x = egcd(b % a, a)


BRUTE FORCE APPROACH




def is_prime(n):  

if n <= 1: 

   return False 

for i in range(2, int(n**0.5) + 1): 

   if n % i == 0: 

     return False 

return True 

def factor_modulus(N):   

for i in range(2, int(N**0.5) + 1): 

   if N % i == 0: 

     return (i, N // i)   

return None   

N = 187 

E = 7 

factors = factor_modulus(N) 

  

if factors: 

P = factors[0] 

Q = factors[1] 

T = (P-1)*(Q-1) 

def brute_force_d(E, T): 

    d = 1 

    while True: 

        if (E * d) % T == 1: 

            return d 

        d += 1 

d = brute_force_d(E, T) 

print("Brute forced private exponent d:", d) 
   return (g, x - (b // a) * y, y)
gcd, x, y = egcd(E, T)
d= x 
print("Private exponent d:", d)
